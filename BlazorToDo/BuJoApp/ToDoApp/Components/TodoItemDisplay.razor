@using ToDoApp.Data

<li class="list-group-item d-flex justify-content-between align-items-center">
    @if (isEditing)
    {
        <div class="input-group">
            <input @bind="editingTitle" class="form-control" />
            <button class="btn btn-sm btn-success" @onclick="SaveEdit">保存</button>
        </div>
    }
    else
    {
        <div>
            <input type="checkbox" class="form-check-input me-2" @bind="Item.IsDone" @bind:after="NotifyUpdate" />
            <span style="@(Item.IsDone ? "text-decoration: line-through;" : "")">@Item.Title</span>
        </div>
        <div>
            <button class="btn btn-sm btn-outline-primary me-2" @onclick="StartEditing">編集</button>
            <button class="btn btn-sm btn-outline-danger" @onclick="() => OnDeleteClicked.InvokeAsync(Item)">削除</button>
        </div>
    }
</li>

@code {
    [Parameter]
    public TodoItem Item { get; set; } = new();

    [Parameter]
    public EventCallback<TodoItem> OnDeleteClicked { get; set; }
    
    [Parameter]
    public EventCallback<TodoItem> OnUpdateClicked { get; set; }

    private bool isEditing = false;
    private string editingTitle = string.Empty;

    private void StartEditing()
    {
        isEditing = true;
        editingTitle = Item.Title ?? string.Empty;
    }

    private async Task SaveEdit()
    {
        Item.Title = editingTitle;
        isEditing = false;
        await OnUpdateClicked.InvokeAsync(Item);
    }
    
    // チェックボックスの状態が変わった後にも更新を通知する
    private async Task NotifyUpdate()
    {
        await OnUpdateClicked.InvokeAsync(Item);
    }
}