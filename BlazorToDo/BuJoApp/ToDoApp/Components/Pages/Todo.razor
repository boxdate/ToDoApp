@page "/todo"
@rendermode InteractiveServer
@using ToDoApp.Data
@using ToDoApp.Components
@using System.IO
@using System.Text.Json

<h3>Daily ToDo List</h3>

<div class="card bg-light mb-4">
    <div class="card-body">
        <div class="input-group">
            <input type="date" class="form-control" @bind="newTaskDate" />
            <input @bind="newTodoTitle" @bind:event="oninput" class="form-control" placeholder="新しいタスク" />
            <button class="btn btn-primary" @onclick="AddTodo">追加</button>
        </div>
    </div>
</div>


@foreach (var dayGroup in todos.GroupBy(t => t.Date).OrderByDescending(g => g.Key))
{
    <div class="mb-3">
        <h4>@dayGroup.Key.ToLongDateString()</h4>
        <ul class="list-group">
            @foreach (var todo in dayGroup)
            {
                <TodoItemDisplay Item="todo" OnDeleteClicked="RemoveTodo" />
            }
        </ul>
    </div>
}


@code {
    private List<TodoItem> todos = new();
    private string? newTodoTitle;
    // 新しいタスクの日付を保持。初期値は今日。
    private DateOnly newTaskDate = DateOnly.FromDateTime(DateTime.Now);
    
    private const string FilePath = "todos.json";

    protected override async Task OnInitializedAsync()
    {
        await LoadTodosFromFile();
    }

    private async Task LoadTodosFromFile()
    {
        if (File.Exists(FilePath))
        {
            var json = await File.ReadAllTextAsync(FilePath);
            var loadedTodos = JsonSerializer.Deserialize<List<TodoItem>>(json);
            if (loadedTodos is not null)
            {
                todos = loadedTodos;
            }
        }
    }

    private async Task SaveTodosToFile()
    {
        var json = JsonSerializer.Serialize(todos);
        await File.WriteAllTextAsync(FilePath, json);
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle))
        {
            var newItem = new TodoItem 
            { 
                Title = newTodoTitle, 
                IsDone = false,
                Date = newTaskDate // 選択された日付を保存
            };
            todos.Add(newItem);
            newTodoTitle = string.Empty;
            await SaveTodosToFile();
        }
    }

    private async Task RemoveTodo(TodoItem todoToRemove)
    {
        todos.Remove(todoToRemove);
        await SaveTodosToFile();
    }
}