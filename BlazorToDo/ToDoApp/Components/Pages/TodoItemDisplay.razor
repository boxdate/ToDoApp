@using ToDoApp.Data

<li class="list-group-item d-flex justify-content-between align-items-center">
    <div>
        <span class="fw-bold me-2">@GetTaskTypeSymbol(Item.Type)</span>
        <span style="@(Item.Status == ToDoApp.Data.TaskStatus.Completed ? "text-decoration: line-through;" : "")">
            @Item.Title
        </span>
    </div>
    <div>
        @if(Item.Type == TaskType.Task)
        {
            <button class="btn btn-sm btn-success me-1" title="完了" @onclick="() => OnStatusChanged.InvokeAsync(ToDoApp.Data.TaskStatus.Completed)">X</button>
            <button class="btn btn-sm btn-info me-1" title="移行" @onclick="() => OnStatusChanged.InvokeAsync(ToDoApp.Data.TaskStatus.Migrated)">></button>
        }
        <button class="btn btn-sm btn-danger" title="削除" @onclick="() => OnDeleteClicked.InvokeAsync()">削除</button>
    </div>
</li>

@code {
    [Parameter]
    public TodoItem Item { get; set; } = default!;

    [Parameter]
    public EventCallback<ToDoApp.Data.TaskStatus> OnStatusChanged { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    private string GetTaskTypeSymbol(TaskType type)
    {
        return type switch
        {
            TaskType.Task => "・",
            TaskType.Event => "○",
            TaskType.Note => "-",
            _ => ""
        };
    }
}
